name: Hybrid AI Stock Analysis

on:
  schedule:
    # 주중 장 시작 전 (UTC+9)에 실행 (월-금 08:30 한국시간)
    - cron: '30 23 * * 0-4'
    # 주중 장 마감 후 (UTC+9)에 실행 (월-금 16:00 한국시간)
    - cron: '0 7 * * 1-5'
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 최대 실행 시간 단축 (15분으로 제한)
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # 의존성 캐싱으로 설치 속도 향상
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -v wheel setuptools
        if [ -f requirements.txt ]; then 
          pip install -v -r requirements.txt
        fi
        # 명시적으로 Gemini API 패키지 설치
        pip install -v google-generativeai
        
        # 설치된 패키지 확인
        pip list | grep google
        python -c "import importlib; print('google.generativeai:', importlib.util.find_spec('google.generativeai'))"
      timeout-minutes: 5  # 의존성 설치 타임아웃 설정
        
    - name: Create cache directory
      run: |
        mkdir -p cache
        touch cache/.gitkeep
        echo "캐시 디렉토리 생성 완료"
        
    - name: Set environment variables
      run: |
        echo "CI=true" >> $GITHUB_ENV
        echo "FORCE_MARKET_OPEN=true" >> $GITHUB_ENV
        echo "USE_TELEGRAM=false" >> $GITHUB_ENV  # 텔레그램 비활성화
        echo "PYTHONUNBUFFERED=1" >> $GITHUB_ENV  # Python의 버퍼링 비활성화하여 실시간 로그 출력
      
    - name: Run Simple Analysis Script
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        USE_TELEGRAM: "false"  # 텔레그램 비활성화
      run: |
        # 간소화된 분석 스크립트 실행 (timeout 설정 10분)
        echo "스크립트 실행 시작 시간: $(date)"
        
        # 명시적인 timeout 설정으로 10분 후 강제 종료
        timeout 10m python test_hybrid_analysis.py || true
        
        echo "스크립트 실행 종료 시간: $(date)"
        
        # 로그 확인
        if [ -f hybrid_analysis_test.log ]; then
          echo "=== 로그 파일 확인 ==="
          tail -n 50 hybrid_analysis_test.log
        else
          echo "로그 파일이 없습니다."
        fi
        
        # 남은 Python 프로세스 정리
        echo "남아있는 Python 프로세스 확인 및 정리:"
        ps aux | grep python
        pkill -f python || true
        sleep 2
        echo "정리 후 프로세스 상태:"
        ps aux | grep python
      continue-on-error: true  # 스크립트가 실패해도 워크플로우 계속 진행
      timeout-minutes: 12  # GitHub Actions 자체 타임아웃 설정
        
    - name: Save token updates
      if: always()  # 이전 단계가 실패해도 항상 실행
      env:
        KAKAO_ACCESS_TOKEN: ${{ env.KAKAO_ACCESS_TOKEN }}
        KAKAO_REFRESH_TOKEN: ${{ env.KAKAO_REFRESH_TOKEN }}
      run: |
        if [ -n "$KAKAO_ACCESS_TOKEN" ] && [ -n "$KAKAO_REFRESH_TOKEN" ]; then
          echo "::add-mask::$KAKAO_ACCESS_TOKEN"
          echo "::add-mask::$KAKAO_REFRESH_TOKEN"
          echo "KAKAO_ACCESS_TOKEN=$KAKAO_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "KAKAO_REFRESH_TOKEN=$KAKAO_REFRESH_TOKEN" >> $GITHUB_ENV
          echo "카카오톡 토큰 업데이트 완료"
        else
          echo "카카오톡 토큰이 설정되지 않았습니다"
        fi
      continue-on-error: true  # 실패해도 워크플로우 계속 진행
      
    - name: Final cleanup and verification
      if: always()  # 항상 실행되는 마무리 단계
      run: |
        echo "===== 워크플로우 마무리 단계 ====="
        echo "현재 시간: $(date)"
        echo "시스템 상태:"
        free -m
        echo "남은 프로세스:"
        ps aux | grep -v "grep" | grep -E "python|main|test_"
        echo "모든 Python 프로세스 종료:"
        pkill -9 -f python || echo "종료할 Python 프로세스가 없습니다"
        sleep 2
        echo "워크플로우 성공적으로 완료됨"
      continue-on-error: true