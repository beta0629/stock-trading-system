name: Hybrid AI Stock Analysis

on:
  schedule:
    # 주중 장 시작 전 (UTC+9)에 실행 (월-금 08:30 한국시간)
    - cron: '30 23 * * 0-4'
    # 주중 장 마감 후 (UTC+9)에 실행 (월-금 16:00 한국시간)
    - cron: '0 7 * * 1-5'
  workflow_dispatch:  # 수동 실행 옵션

jobs:
  analyze:
    runs-on: ubuntu-latest
    timeout-minutes: 90  # 최대 실행 시간 90분으로 제한
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # 의존성 캐싱으로 설치 속도 향상
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -v wheel setuptools
        if [ -f requirements.txt ]; then 
          pip install -v -r requirements.txt
        fi
        # 명시적으로 Gemini API 패키지 설치
        pip install -v google-generativeai
        
        # 설치된 패키지 확인
        pip list | grep google
        python -c "import importlib; print('google.generativeai:', importlib.util.find_spec('google.generativeai'))"
      timeout-minutes: 5  # 의존성 설치 타임아웃 설정
        
    - name: Create cache directory
      run: |
        mkdir -p cache
        touch cache/.gitkeep
        
    - name: Set environment variables
      run: |
        echo "CI=true" >> $GITHUB_ENV
        echo "FORCE_MARKET_OPEN=true" >> $GITHUB_ENV
        echo "USE_TELEGRAM=false" >> $GITHUB_ENV  # 텔레그램 비활성화
      
    - name: Run Hybrid AI Stock Analysis
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
        KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
        KIS_ACCOUNT_NO: ${{ secrets.KIS_ACCOUNT_NO }}
        USE_TELEGRAM: "false"  # 텔레그램 비활성화
      run: |
        # 최대 3번 재시도하는 스크립트
        MAX_ATTEMPTS=3
        ATTEMPT=1
        SUCCESS=false
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
          echo "Running attempt $ATTEMPT of $MAX_ATTEMPTS..."
          
          # 시간 초과 방지를 위한 timeout 명령어 추가
          if timeout 60m python main.py --ci --mode=analysis; then
            SUCCESS=true
            echo "Script executed successfully!"
          else
            EXIT_CODE=$?
            echo "Attempt $ATTEMPT failed. Exit code: $EXIT_CODE"
            
            # 디버그 정보 출력
            echo "==== Python Modules ===="
            python -c "import sys; print('Python sys.path:', sys.path)"
            
            # 로그 확인
            echo "==== Error Debug Info ===="
            echo "Last 50 lines of logs:"
            if [ -f hybrid_analysis_test.log ]; then
              tail -n 50 hybrid_analysis_test.log
            fi
            
            if [ -f stock_analysis.log ]; then
              tail -n 50 stock_analysis.log
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Retrying in 20 seconds..."
              sleep 20
              
              # 남아있는 Python 프로세스 정리
              pkill -f "python main.py" || true
              sleep 5
            fi
          fi
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "All attempts failed, but continuing workflow."
          # exit 1  # 워크플로우를 중단하지 않기 위해 주석 처리
        fi
      continue-on-error: true  # 스크립트가 실패해도 워크플로우 계속 진행
      timeout-minutes: 70  # GitHub Actions 자체 타임아웃 설정
        
    - name: Save token updates
      if: always()  # 이전 단계가 실패해도 항상 실행
      env:
        KAKAO_ACCESS_TOKEN: ${{ env.KAKAO_ACCESS_TOKEN }}
        KAKAO_REFRESH_TOKEN: ${{ env.KAKAO_REFRESH_TOKEN }}
      run: |
        if [ -n "$KAKAO_ACCESS_TOKEN" ] && [ -n "$KAKAO_REFRESH_TOKEN" ]; then
          echo "::add-mask::$KAKAO_ACCESS_TOKEN"
          echo "::add-mask::$KAKAO_REFRESH_TOKEN"
          echo "KAKAO_ACCESS_TOKEN=$KAKAO_ACCESS_TOKEN" >> $GITHUB_ENV
          echo "KAKAO_REFRESH_TOKEN=$KAKAO_REFRESH_TOKEN" >> $GITHUB_ENV
        fi
      continue-on-error: true  # 실패해도 워크플로우 계속 진행
      
    - name: Display log files
      if: always()  # 이전 단계가 실패해도 항상 실행
      run: |
        echo "=== Hybrid Analysis Log ==="
        if [ -f hybrid_analysis_test.log ]; then
          tail -n 100 hybrid_analysis_test.log
        else
          echo "Hybrid analysis log not found"
        fi
        
        echo "=== Stock Analysis Log ==="
        if [ -f stock_analysis.log ]; then
          tail -n 100 stock_analysis.log
        else
          echo "Stock analysis log not found"
        fi
        
        # 시스템 상태 확인
        echo "=== System Status ==="
        free -m
        echo "=== Python Processes ==="
        ps aux | grep python
      continue-on-error: true  # 로그 표시 중 오류가 발생해도 워크플로우 계속 진행