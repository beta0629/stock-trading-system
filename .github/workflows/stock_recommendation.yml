name: Stock Recommendation Analysis

on:
  schedule:
    # 매일 아침 8시 30분(한국 시간 기준, UTC+9)에 실행 - 시장 개장 전
    - cron: '30 23 * * 0-4'  # UTC 기준 월-금 23:30 (한국 시간으로 아침 8:30)
  
  # 수동으로도 워크플로우 실행 가능하게 설정
  workflow_dispatch:

jobs:
  analyze:
    runs-on: ubuntu-latest
    # 전체 작업 타임아웃 설정 - 1시간으로 설정
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # 의존성 캐싱으로 설치 속도 향상
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      # 의존성 설치 실패 시 재시도
      continue-on-error: false
      timeout-minutes: 5  # 의존성 설치 타임아웃 설정
    
    - name: Create cache directory
      run: |
        mkdir -p cache
        touch cache/.gitkeep
    
    - name: Run stock recommendation script
      run: |
        # 최대 3번 재시도하는 스크립트
        MAX_ATTEMPTS=3
        ATTEMPT=1
        SUCCESS=false
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
          echo "Running attempt $ATTEMPT of $MAX_ATTEMPTS..."
          
          if python test_stock_recommendation.py; then
            SUCCESS=true
            echo "Script executed successfully!"
          else
            echo "Attempt $ATTEMPT failed. Exit code: $?"
            # 더 많은 디버그 정보 출력
            echo "==== Python Error Trace ===="
            echo "Last 50 lines of logs:"
            if [ -f stock_recommendation_test.log ]; then
              tail -n 50 stock_recommendation_test.log
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          fi
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "All attempts failed, but continuing workflow."
          # 작업 실패로 표시하지만, 워크플로우는 계속 진행
          # exit 1  # 워크플로우를 멈추지 않기 위해 주석 처리
        fi
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        KAKAO_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        USE_TELEGRAM: "false"  # 텔레그램 비활성화
        FORCE_MARKET_OPEN: "true"  # 시장 시간과 관계없이 항상 실행
      timeout-minutes: 30  # 스크립트 실행 타임아웃 설정
      continue-on-error: true  # 스크립트 실패해도 워크플로우 계속 진행
    
    - name: Display log files
      if: always()  # 이전 단계가 실패해도 항상 실행
      run: |
        echo "=== Stock Recommendation Log ==="
        if [ -f stock_recommendation_test.log ]; then
          tail -n 50 stock_recommendation_test.log
        else
          echo "Log file not found"
        fi
        echo "=== GPT Stock Analysis Log ==="
        if [ -f gpt_stock_analysis.log ]; then
          tail -n 50 gpt_stock_analysis.log
        else
          echo "Log file not found"
        fi
      continue-on-error: true  # 로그 표시 중 오류가 발생해도 워크플로우 계속 진행