name: Real Trading (Currently Disabled)

on:
  # 실제 매매는 현재 비활성화 상태입니다
  # schedule:
  #   # 한국 시장 시간 (오전 9시, 오후 3시 30분)
  #   - cron: '0 0 * * 1-5'   # UTC 기준 월-금 00:00 (한국 시간 09:00)
  #   - cron: '30 6 * * 1-5'  # UTC 기준 월-금 06:30 (한국 시간 15:30)
  #   
  #   # 미국 시장 시간 (밤 10시 30분, 새벽 5시)
  #   - cron: '30 13 * * 1-5' # UTC 기준 월-금 13:30 (한국 시간 22:30)
  #   - cron: '0 20 * * 1-5'  # UTC 기준 월-금 20:00 (한국 시간 05:00)
  
  # 수동으로만 실행 가능하게 설정 (실수로 실행되는 것 방지)
  workflow_dispatch:
    inputs:
      confirmation:
        description: '실제 매매를 실행하시겠습니까? (yes를 입력하세요)'
        required: true
        default: 'no'

jobs:
  check_confirmation:
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - id: check
        run: |
          if [ "${{ github.event.inputs.confirmation }}" = "yes" ]; then
            echo "proceed=true" >> $GITHUB_OUTPUT
            echo "✅ 확인 완료: 실행을 진행합니다."
          else
            echo "proceed=false" >> $GITHUB_OUTPUT
            echo "❌ 확인 실패: 'yes'를 입력하지 않았습니다. 실행을 중단합니다."
          fi
        
  analyze:
    needs: check_confirmation
    if: ${{ needs.check_confirmation.outputs.proceed == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 120  # 최대 실행 시간 제한
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'  # 의존성 캐싱으로 설치 속도 향상
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      timeout-minutes: 5  # 의존성 설치 타임아웃 설정
      
    - name: Create cache directory
      run: |
        mkdir -p cache
        touch cache/.gitkeep
    
    - name: Run real trading
      run: |
        # 최대 재시도 횟수 설정
        MAX_ATTEMPTS=3
        ATTEMPT=1
        SUCCESS=false
        
        echo "⚠️ 실제 매매 모드로 실행합니다 (모의 투자가 아닙니다) ⚠️"
        echo "시작 시간: $(date)"
        
        while [ $ATTEMPT -le $MAX_ATTEMPTS ] && [ "$SUCCESS" = false ]; do
          echo "실행 시도 #$ATTEMPT/$MAX_ATTEMPTS"
          
          # 시간 초과 방지를 위한 timeout 명령어 추가 (90분 제한)
          if timeout 90m python main.py; then
            SUCCESS=true
            echo "✅ 스크립트가 성공적으로 실행되었습니다!"
          else
            EXIT_CODE=$?
            echo "❌ 시도 $ATTEMPT 실패. 종료 코드: $EXIT_CODE"
            
            # 디버그 정보 출력
            echo "==== 로그 파일 확인 ===="
            if [ -f stock_analysis.log ]; then
              tail -n 50 stock_analysis.log
            fi
            
            ATTEMPT=$((ATTEMPT+1))
            if [ $ATTEMPT -le $MAX_ATTEMPTS ]; then
              echo "30초 후 재시도합니다..."
              sleep 30
              
              # 남아있는 Python 프로세스 정리
              echo "남은 프로세스 정리 중..."
              pkill -f "python main.py" || true
              sleep 5
            fi
          fi
        done
        
        if [ "$SUCCESS" = false ]; then
          echo "⚠️ 모든 시도가 실패했습니다."
          # 워크플로우를 계속 진행하기 위해 오류 코드를 반환하지 않음
        fi
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
        KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
        KAKAO_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
        KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
        KIS_ACCOUNT_NO: ${{ secrets.KIS_ACCOUNT_NO }}
        KIS_PERSONALSECKEY: ${{ secrets.KIS_PERSONALSECKEY }}
        # 현재는 모의 투자로 설정 (실제 매매로 전환 시 true로 변경)
        KIS_REAL_TRADING: "false"
        FORCE_MARKET_OPEN: "true"  # 시장 시간과 관계없이 항상 실행
        USE_TELEGRAM: "false"  # 텔레그램 비활성화
      continue-on-error: true  # 스크립트가 실패해도 워크플로우 계속 진행
      timeout-minutes: 100  # GitHub Actions 자체 타임아웃 설정
    
    - name: Display log files
      if: always()  # 이전 단계가 실패해도 항상 실행
      run: |
        echo "=== Trading Log ==="
        if [ -f trading.log ]; then
          tail -n 100 trading.log
        else
          echo "Trading log not found"
        fi
        
        echo "=== Stock Analysis Log ==="
        if [ -f stock_analysis.log ]; then
          tail -n 100 stock_analysis.log
        else
          echo "Stock analysis log not found"
        fi
        
        # 시스템 상태 확인
        echo "=== System Status ==="
        free -m
        echo "=== Python Processes ==="
        ps aux | grep python
      continue-on-error: true  # 로그 표시 중 오류가 발생해도 워크플로우 계속 진행
      
    - name: Clean up processes
      if: always()  # 이전 단계가 실패해도 항상 실행
      run: |
        echo "남은 Python 프로세스 정리 중..."
        pkill -f python || true
        echo "정리 완료"
      continue-on-error: true