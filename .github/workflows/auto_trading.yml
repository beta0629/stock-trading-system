name: 모의 자동매매 시스템

on:
  schedule:
    # 한국 시간 오후 11시 36분 (UTC 14:36)
    - cron: '36 14 * * *'
  workflow_dispatch:
    # 수동 실행 옵션

jobs:
  auto-trading:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 최대 실행시간: 3시간
    
    env:
      # 기본 설정
      MOCK_INITIAL_CAPITAL: "10000000"  # 모의 자본금 (1천만원)
      KR_MARKET_OPEN_TIME: "09:00"  # 한국 시장 시작 시간
      KR_MARKET_CLOSE_TIME: "15:30"  # 한국 시장 종료 시간
      USE_KAKAO: "true"  # 카카오톡 알림 활성화
      USE_GPT_ANALYSIS: "true"  # GPT 분석 활성화
      FORCE_MARKET_OPEN: "true"  # 테스트를 위해 시장 강제 오픈
      MAX_RUNTIME_MINUTES: "170"  # 실제 실행 시간 (자동 재시작 고려)
      USE_TELEGRAM: "false"  # 텔레그램 비활성화
      CI: "true"  # CI 환경 표시
      
      # OpenAI API 설정
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: "gpt-4o"
      OPENAI_MAX_TOKENS: "1000"
      OPENAI_TEMPERATURE: "0.7"
      OPENAI_REQUEST_INTERVAL: "1.0"
      
      # 카카오톡 설정
      KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
      KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
      KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
      KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}

    steps:
      - name: 체크아웃 코드
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴

      - name: Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: 캐시 디렉토리 생성
        run: |
          mkdir -p cache
          touch cache/.gitkeep
          echo "캐시 디렉토리 생성 완료"

      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        timeout-minutes: 5  # 의존성 설치 타임아웃 설정

      - name: 시스템 정보 출력 및 환경 변수 확인
        run: |
          echo "현재 시간 (KST): `TZ='Asia/Seoul' date`"
          echo "현재 시간 (UTC): `date`"
          echo "Python 버전: `python --version`"
          echo "작업 디렉토리: `pwd`"
          ls -la
          
          # 시스템 리소스 확인
          echo "=== 시스템 리소스 ==="
          free -h
          df -h
          
          # 환경 변수 설정 확인 (값은 가리고 키만 확인)
          if [ -n "$OPENAI_API_KEY" ]; then echo "✅ OPENAI_API_KEY가 설정되어 있습니다"; else echo "❌ OPENAI_API_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_API_KEY" ]; then echo "✅ KAKAO_API_KEY가 설정되어 있습니다"; else echo "❌ KAKAO_API_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_ACCESS_TOKEN" ]; then echo "✅ KAKAO_ACCESS_TOKEN이 설정되어 있습니다"; else echo "❌ KAKAO_ACCESS_TOKEN이 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_REFRESH_TOKEN" ]; then echo "✅ KAKAO_REFRESH_TOKEN이 설정되어 있습니다"; else echo "❌ KAKAO_REFRESH_TOKEN이 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_REST_API_KEY" ]; then echo "✅ KAKAO_REST_API_KEY가 설정되어 있습니다"; else echo "❌ KAKAO_REST_API_KEY가 설정되지 않았습니다"; fi

      - name: 모의 자동매매 실행 (자동 재시작 기능 포함)
        env:
          RESTART_COUNT: "10"  # 최대 재시작 횟수
        run: |
          # 실행 전 기존 프로세스 정리
          pkill -f "python test_mock_auto_trading.py" 2>/dev/null || true
          
          for attempt in $(seq 1 $RESTART_COUNT); do
            echo "자동매매 실행 시도 #$attempt/$RESTART_COUNT"
            echo "=============================="
            echo "실행 시작: $(date)"
            start_time=$(date +%s)
            
            # 타임스탬프 로그 파일명 생성
            timestamp=$(date +%Y%m%d_%H%M%S)
            log_file="mock_auto_trading_${timestamp}.log"
            
            # 실행: timeout 명령어로 강제 타임아웃 처리 (60분)
            timeout 60m python test_mock_auto_trading.py || EXIT_CODE=$?
            
            # 종료 코드 확인
            if [ -n "$EXIT_CODE" ]; then
              if [ $EXIT_CODE -eq 124 ]; then
                echo "⚠️ 타임아웃 발생 (60분 경과)"
              else
                echo "⚠️ 오류 발생 (코드: $EXIT_CODE)"
              fi
              unset EXIT_CODE
            fi
            
            end_time=$(date +%s)
            duration=$((end_time - start_time))
            
            echo "실행 완료: $duration 초 동안 실행됨"
            
            # 로그 파일 확인 및 문제 진단
            echo "===== 로그 파일 분석 ====="
            if [ -f mock_auto_trading.log ]; then
              echo "최근 로그 항목:"
              tail -n 20 mock_auto_trading.log
              
              # 오류 키워드 확인
              echo "오류 검색 결과:"
              grep -i "error\|exception\|failed\|timeout" mock_auto_trading.log | tail -n 10 || echo "오류 관련 로그가 없습니다."
            else
              echo "로그 파일을 찾을 수 없습니다."
            fi
            
            # 실행 시간이 너무 짧으면(오류) 대기시간 증가
            if [ $duration -lt 60 ]; then
              echo "⚠️ 오류 감지: 실행이 너무 빨리 종료되었습니다. 45초 대기 후 재시작합니다."
              sleep 45
              
              # 남은 프로세스 정리
              echo "남은 Python 프로세스 정리 중..."
              pkill -f "python test_mock_auto_trading.py" || true
              sleep 5
            else
              echo "✅ 정상 실행 또는 계획된 종료: 10초 후 재시작합니다."
              sleep 10
            fi
            
            echo "=============================="
          done
          
          echo "모든 재시작 시도가 완료되었습니다."

      - name: 로그 파일 업로드
        if: always()  # 이전 단계가 실패해도 항상 실행
        uses: actions/upload-artifact@v4
        with:
          name: trading-logs
          path: |
            mock_auto_trading*.log
            *.log
            
      - name: 시스템 상태 확인 및 정리
        if: always()  # 이전 단계가 실패해도 항상 실행
        run: |
          echo "==== 프로세스 상태 ===="
          ps aux | grep python
          
          echo "==== 시스템 리소스 ===="
          free -h
          df -h
          
          echo "==== 정리 작업 ===="
          pkill -f "python test_mock" || true
          echo "정리 완료"
        continue-on-error: true  # 이 단계가 실패해도 워크플로우 계속 진행