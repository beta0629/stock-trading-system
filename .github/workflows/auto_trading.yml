name: 모의 자동매매 시스템

on:
  schedule:
    # 한국 시간 오후 11시 36분 (UTC 14:36)
    - cron: '36 14 * * *'
  workflow_dispatch:
    # 수동 실행 옵션

jobs:
  auto-trading:
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 최대 실행시간: 3시간
    
    env:
      # 기본 설정
      MOCK_INITIAL_CAPITAL: "10000000"  # 모의 자본금 (1천만원)
      KR_MARKET_OPEN_TIME: "09:00"  # 한국 시장 시작 시간
      KR_MARKET_CLOSE_TIME: "15:30"  # 한국 시장 종료 시간
      USE_KAKAO: "true"  # 카카오톡 알림 활성화
      USE_GPT_ANALYSIS: "true"  # GPT 분석 활성화
      FORCE_MARKET_OPEN: "true"  # 테스트를 위해 시장 강제 오픈
      MAX_RUNTIME_MINUTES: "170"  # 실제 실행 시간 (자동 재시작 고려)
      USE_TELEGRAM: "false"  # 텔레그램 비활성화
      CI: "true"  # CI 환경 표시
      
      # 데이터베이스 설정
      USE_DATABASE: "true"
      DB_TYPE: "sqlite"
      DB_AUTO_BACKUP: "true"
      
      # OpenAI API 설정
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_MODEL: "gpt-4o"
      OPENAI_MAX_TOKENS: "1000"
      OPENAI_TEMPERATURE: "0.7"
      OPENAI_REQUEST_INTERVAL: "1.0"
      
      # 카카오톡 설정
      KAKAO_API_KEY: ${{ secrets.KAKAO_API_KEY }}
      KAKAO_ACCESS_TOKEN: ${{ secrets.KAKAO_ACCESS_TOKEN }}
      KAKAO_REFRESH_TOKEN: ${{ secrets.KAKAO_REFRESH_TOKEN }}
      KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
      
      # 한국투자증권 API 설정
      KIS_APP_KEY: ${{ secrets.KIS_APP_KEY }}
      KIS_APP_SECRET: ${{ secrets.KIS_APP_SECRET }}
      KIS_ACCOUNT_NO: ${{ secrets.KIS_ACCOUNT_NO }}
      KIS_VIRTUAL_APP_KEY: ${{ secrets.KIS_VIRTUAL_APP_KEY }}
      KIS_VIRTUAL_APP_SECRET: ${{ secrets.KIS_VIRTUAL_APP_SECRET }}
      KIS_VIRTUAL_ACCOUNT_NO: ${{ secrets.KIS_VIRTUAL_ACCOUNT_NO }}

    steps:
      - name: 체크아웃 코드
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 빠른 체크아웃을 위해 최소 히스토리만 가져옴

      - name: Python 설정
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: 캐시 디렉토리 생성
        run: |
          mkdir -p cache
          mkdir -p data/backup
          mkdir -p logs
          touch cache/.gitkeep
          echo "캐시 디렉토리 생성 완료"

      - name: 의존성 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        timeout-minutes: 5  # 의존성 설치 타임아웃 설정

      - name: 시스템 정보 출력 및 환경 변수 확인
        run: |
          echo "현재 시간 (KST): `TZ='Asia/Seoul' date`"
          echo "현재 시간 (UTC): `date`"
          echo "Python 버전: `python --version`"
          echo "작업 디렉토리: `pwd`"
          ls -la
          
          # 시스템 리소스 확인
          echo "=== 시스템 리소스 ==="
          free -h
          df -h
          
          # 환경 변수 설정 확인 (값은 가리고 키만 확인)
          if [ -n "$OPENAI_API_KEY" ]; then echo "✅ OPENAI_API_KEY가 설정되어 있습니다"; else echo "❌ OPENAI_API_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_API_KEY" ]; then echo "✅ KAKAO_API_KEY가 설정되어 있습니다"; else echo "❌ KAKAO_API_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_ACCESS_TOKEN" ]; then echo "✅ KAKAO_ACCESS_TOKEN이 설정되어 있습니다"; else echo "❌ KAKAO_ACCESS_TOKEN이 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_REFRESH_TOKEN" ]; then echo "✅ KAKAO_REFRESH_TOKEN이 설정되어 있습니다"; else echo "❌ KAKAO_REFRESH_TOKEN이 설정되지 않았습니다"; fi
          if [ -n "$KAKAO_REST_API_KEY" ]; then echo "✅ KAKAO_REST_API_KEY가 설정되어 있습니다"; else echo "❌ KAKAO_REST_API_KEY가 설정되지 않았습니다"; fi
          
          # 한국투자증권 API 키 확인
          if [ -n "$KIS_APP_KEY" ]; then echo "✅ KIS_APP_KEY가 설정되어 있습니다"; else echo "❌ KIS_APP_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KIS_APP_SECRET" ]; then echo "✅ KIS_APP_SECRET이 설정되어 있습니다"; else echo "❌ KIS_APP_SECRET이 설정되지 않았습니다"; fi
          if [ -n "$KIS_VIRTUAL_APP_KEY" ]; then echo "✅ KIS_VIRTUAL_APP_KEY가 설정되어 있습니다"; else echo "❌ KIS_VIRTUAL_APP_KEY가 설정되지 않았습니다"; fi
          if [ -n "$KIS_VIRTUAL_APP_SECRET" ]; then echo "✅ KIS_VIRTUAL_APP_SECRET이 설정되어 있습니다"; else echo "❌ KIS_VIRTUAL_APP_SECRET이 설정되지 않았습니다"; fi
          if [ -n "$KIS_VIRTUAL_ACCOUNT_NO" ]; then echo "✅ KIS_VIRTUAL_ACCOUNT_NO가 설정되어 있습니다"; else echo "❌ KIS_VIRTUAL_ACCOUNT_NO가 설정되지 않았습니다"; fi

      - name: 데이터베이스 초기화
        run: |
          echo "데이터베이스 초기화 중..."
          python -c "from src.database.db_init import initialize_database; initialize_database()"
          echo "데이터베이스 초기화 완료"

      - name: API 연결 테스트
        run: |
          echo "한국투자증권 API 연결 테스트 중..."
          python kis_auth.py --check-connection || echo "API 테스트 실패. 매매 과정에서 문제가 발생할 수 있습니다."
        continue-on-error: true  # API 실패해도 워크플로우 계속 진행

      - name: 데이터베이스 상태 확인
        run: |
          echo "데이터베이스 상태 확인 중..."
          python -c "from src.database.db_manager import DatabaseManager; dm = DatabaseManager.get_instance(); print(f'포트폴리오 항목 수: {len(dm.get_portfolio())}개')"
        continue-on-error: true  # 실패해도 워크플로우 계속 진행

      - name: 자동매매 실행 (main.py)
        env:
          RESTART_COUNT: "5"  # 최대 재시작 횟수
        run: |
          # 데이터베이스 디렉토리 설정
          export SQLITE_DB_PATH="./data/stock_trading.db"
          export SIMULATION_MODE="false"  # 실제 API를 통한 매매 활성화
          export FORCE_MARKET_OPEN="true"  # 시장 강제 오픈
          
          echo "자동매매 시스템을 시작합니다 (실행 횟수: $RESTART_COUNT 회)"
          
          for attempt in $(seq 1 $RESTART_COUNT); do
            echo "실행 시도 #$attempt/$RESTART_COUNT: $(date)"
            timeout 60m python main.py --force-market-open || true
            
            # 재시작 간 대기 시간
            if [ $attempt -lt $RESTART_COUNT ]; then
              echo "다음 실행까지 10초 대기..."
              sleep 10
            fi
          done
          
          echo "모든 매매 사이클이 완료되었습니다."

      - name: 로그 파일 및 데이터베이스 업로드
        if: always()  # 이전 단계가 실패해도 항상 실행
        uses: actions/upload-artifact@v4
        with:
          name: trading-logs-and-data
          path: |
            logs/*.log
            *.log
            data/*.db
            data/backup/*.db
            
      - name: 시스템 상태 확인 및 정리
        if: always()  # 이전 단계가 실패해도 항상 실행
        run: |
          echo "==== 프로세스 상태 ===="
          ps aux | grep python
          
          echo "==== 시스템 리소스 ===="
          free -h
          df -h
          
          echo "==== 정리 작업 ===="
          pkill -f "python" || true
          echo "정리 완료"
        continue-on-error: true  # 이 단계가 실패해도 워크플로우 계속 진행